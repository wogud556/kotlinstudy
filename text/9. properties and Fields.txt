9. properties and Fields

프로퍼티 선언
- 코틀린 클래스는 프로퍼티를 가질 수 있다
var (mutable) / val (read-only)
class Address {
  var name : String = "Kotlin"
  var city: String = "Seoul"
}

- 프로퍼티 사용은 자바의 필드를 사용하듯이 하면 됨

fun copyAddress(address : Address): Address {
  val result = Address()
  result.name = address.name

  return result
}

프로퍼티 문법

var <propertyName>[: <PropertyType>] [=<property_initializer>]
  [<getter>]
  [<setter>]

- 옵션(생략가능)
   - propertyType
    property_initializer에서 타입을 추론 가능한 경우 생략 가능
   - property_initializer
   - getter
   - setter

var mutable 프로퍼티

var로 시작한다 기본적으로 getter, setter로 가지고 있다.

var initialized = 1

var allByDefault: Int?

val 프로퍼티 : read-only
- val대신 val 키워드 사용
- setter가 없음

class Address{
  val initialized = 1
  val allByDefault: Int?
}

custom accessors (getter, setter)
- custom accessor는 프로퍼티 선언 내부에, 일반 함수 처럼 선언할 수 있음

- getter
   val isEmpty: Boolean
      get() = this.size == 0
- setter
   var stringRepresentation: String
       get() = this.toString()
       set(value) {
           setDataFromString(value)
       }

타입생략
 - 코틀린 1.1부터는 getter를 통해 타입을 추론할 수 있는 경우, 프로퍼티 타입을 생략할 수 있음

val isEmpty: Boolean
   get() = this.size == 0

val isEmpty
   get() = this.size == 0

프로퍼티ㅏ
- accseeor에 가시성 변경이 필요하거나
- accessor 에 어노테이션이 필요한 경우
- 기본 accsessor의 수정 없이 body없는 accessor를 통해 정의 가능
   var setterVisibility:String = "abc"
       private set
   var setterWithAnnotation: Any? = null
        @Inject set
- body를 작성해주어도 됨
   var setterVisibility: String = "abc"
       private set(value) {
            field = value
       }

backing fields
- 코틀린 클래스는 field를 가질 수 없음
- field라는 식별자를 통해 접근할 수 있는 automatic backing field를 제공함
- field는 프로퍼티의 accessor에서만 사용 가능함

var counter = 0
    set(value){
       if(value >= 0) field = value
}

backing field 생성 조건
 - accessor중 1개라도 기본 구현을 사용하는 경우
 - custom accessor에서 field 식별자를 참조하는 경우

var counter = 0
    set(value) {
       if(value >= 0) field = value
   }

- 아래 경우는 backing field를 생성하지 앟음
   val isEmpty: Boolean
     get() = this.size == 0


backing properties
- implicit backing field 방식이 맞지 않는 경우에는
- backing property를 이용할 수 있음

private var _table: Map<String, Int>? = null
public val table : Map<String, Int>
   get(){
         if(_table == null){
             _table = HashMap()
          }
          return _table ? :throw AssertionError("null")
    }

complie-time Constans
- const modifier 를 이용하면 컴파일 타임 상수를 만들 수 있음
    이런 프로퍼티는 어노테이션에서도 사용 가능함
- 조건
   - top-level이거나
   - object의 멤버이거나
   - String나 프리미티브 타입으로 초기화가 된 경우

const val SUBSYSTEM_DEPRECATED: String = "This subsystem is deprecated"

@Deprecated(SUBSYSTEM_DEPRECATED)
fun foo(){...}

Late-Initialized Properties

- 일반적으로 프로퍼티는 non-null 타입으로 선언됨
- 간혹 non-null 타입 프로퍼티를 사용하고 싶지만, 생성자에서 초기화를 해줄 수 없는 경우가 있음
 - Dependency injection
 - Buffer knife
 - unit test의 setup. 메소드
public class MyTest{
   lateinit var subject: TestSubject

   @SetUp fun setup(){
      subject = TestSubject()
   }

  @Test fun test(){
       subject.method()
   }

}

Late-Initialized Properties
- 객체가 constructor에서는 할당되지 못하지만
- 여전히 non-null 타입으로 사용하고 싶은 경우
- Lateinit modifier를 사용 가능
- 조건
  - 클래스의 바디에서 선언된 프로퍼티만 가능
  - 기본 생성자에서 선언된 프로퍼티는 안됨
  - var 프로퍼티만 가능
  - non-null 타입이어야 함
  - 프리미티브 타입이면 안됨
- lateinit 프로퍼티가 초기화되기 전에 접근하면 오류가 발생됨