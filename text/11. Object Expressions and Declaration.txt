Object Expressions and Declarations

Object의 용도
- 어떤 새로운 class에서 조금 변경된 객체를 생성 할 때
- 새로운 subClass의 명시적인 선언 없이 객체 생성

Object Expressions
- java익명객체

Object Declarations
- 싱글턴
Companion Object
- 싱글턴 + Class method(static)

코틀린은 정적 변수 혹은 메소드가 없고 대신 패키지 내에  함수를 선언하여 사용할 수 있다.

자바와 c#에 비해서 정적 변수 혹은 메소드가 없다. 대신 패키지 레벨 function을 사용한다.

설계 자체를 static 멤버로 되게끔 했다.

객체표현식
- java 에서는 익명 내부 클래스를 사용해서 처리
- kotlin에서는 Object expressions을 사용

btn.setOnClickListener(new OnClickListener() {
    public void onClick(View v){

   }
});

window.addMouseListener(object : MouseAdapter() {
   override fun mouseClicked(e: MouseEvent) {  }
   override fun mouseEntered(e: MouseEvent) {  }
})

object expressions
객체 표현식 상속
- 슈펴타입의 생성자가 있는 경우 반드시 값을 전달 해 주어야 함
- 슈퍼타입이 여러개인 경우 ':'콜론 뒤에, ','콤마로 구분해서 명시해주면 됨

open class A(x: Int){
  public open val y: Int = x
}

interface B {...}

val ab: A = object : A(1), B{
   override val y = 15
}

객체표현식 상속 없는 경우
- 특별히 상속받을 supertypes가 없는 경우 간단하게 작성 가능

val adHoc = object {
   var x : Int = 0
   var y : Int = 0 
}

print(adHoc.x + adHoc.y)

제약사항
- 익명 객체가 local이나 private 으로 선언될 때만 type으로 사용될 수 있다.
- 익명 객체나 public function이나 public property에서는 리턴 되는 경우, 익명객체의 슈퍼타입으로 동작됨, 이런 경우 익명 객체에 추가된 멤버에 접근이 불가능

class C {
   private fun foo() = object {val x : Strin = "x"}
   fun publicFoo() = object {val x: String = "x"}

   fun bar() {
       val x1 = foo().x
       val x2 = publicFoo().x
   }

}

객체 표현식 특징
- 익명 객체의 코드는 enclosing scope의 변수를 접근할 수 있음
- Java 와 다르게 final variables 제약 조건이 없음

fun countClicks(window: JComponent) {
   var clickCount = 0
   var enterCount = 0
   window.addMouseListener(object : MouseAdapter() {
        override fun mouseClicked(e : MouseEvent){
             clickCount ++
        }
        override fun mouseEntered(e : MouseEvent){
             enterCount ++
        }
    
   })
}

객체선언용도
- 매우 유용한 singleton 패턴을 
- 코틀린에서는 object declarations을 이용해서 만들 수 있음

object DataProviderManager{
    fun registerDataProvider(provider : DataProvider){

    }
    val allDataProviders : Collection <DataProvider>
           get() = 

}

객체 선언 문법
- object 키워드 뒤에 항상 이름이 있어야 함
- object declation은 object expression이 아님
- 그래서 할당 구문의 우측체 사용될 수 가 없음

object DataProviderManager {
   fun registerDataProvider (provider : DataProvider) {}
   val allDataProviders: Collection <DataProvider>
}

-object declaration 의 객체를 참조하려면 해당 이름으로 직접 접근하면 됨.

객체 선언 문법
-  슈퍼타입을 가질 수 있음(상속 가능)

object DefaultListener : MouseAdapter(){
   override fun mouseClicked(e: MouseEvent) {}
   override fun mouseEntered(e: MouseEvent) {}
}

동반자 객체
- 클래스 내부의 obejct declaration은 companion 키워드를 붙일 수 있다
class MyClass {
   companion object Factory{
         fun create() : MyClass = MyClass()
   }
}

- companion object의 멤버는 클래스 이름을 통해서 호출할 수 있음

val instance = MyClass.create() //static이랑 유사하다고 보면 된다.

- companion object의 멤버가 다른 언어의 static 멤버 처럼 보일 수 있지만 아님
- companion object의 멤버는 실제 객체의 멤버임
- 슈퍼클래스도 가질 수 있는 클래스의 객체임

interface Factory<T>{
   fun create() : T
}

class MyClass {
    companion object : Factory<MyClass> {
        override fun create() : MyClass = MyClass()
    }
}

semantic difference between object expressions and declarations

object expressions vs object declaration

- object expression는 즉시 초기화 되고 실행된다
- object declrations는 나중에 초기화 된다.(최초 접근 시)
- companion object는 클래스가 로드 될 때 초기화 됨, java static initializer와 매칭됨